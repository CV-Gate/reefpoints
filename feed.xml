<!DOCTYPE html><html><head><title>DockYard ~ Ruby on Rails and Ember.js Development | Boston-based Web &amp; Mobile Software Consultancy</title><link href="/stylesheets/all.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all.js" type="text/javascript"></script><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta content='DockYard.com - ' name='description'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                                                    ..
                                                                 ,Z+O.
                                                              .OO.O.. 
                                                             OZ..O.   
                                                         ..OO..87.    
                                                        .O7O..O...    
                                                      .O...Z~O.       
                                                   .:Z~. ..Z..        
                                                  +O.O   .8..         
                                     ...       .OO.  O  O?.           
                             ..ZOOOOOOOOOZOOO.ZOZ.   .OO..            
                           .OOOOOOOOOOOOOOOOOO..Z.   $O.              
                         .ZOOOOOOOOOOOOOOOOOO.  .O..O.                
                        .ZOOOOOOOOOOOOOOOOOOOZ  .:O$.                 
                        OZOOOOOOOOOOO...OOOOOOOZ$ZO                   
                      ..OOOOOOOOOOOOO  .OOOOOOOOOOO..                 
                      .OOOOOOOOOOOOOOOOOOOOOOOOOOOOO.                 
                      .OOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.                 
                      OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.                 
                     .OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.                 
                     :OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.                 
                     ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.                 
                     OOOOOOOOOOOOOOOOOOOOOOOOOOOO7OO.                 
                     ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.                 
                     OOOOOOZOOOOOOOO.ZOOOOOOOOOOO7OO.                 
                     ZOOOOO.OOOOOOOO.OOOOOOOOOO.  OO.                 
...     ..           OOOOO.OOOOOOOO.OOOOOOOOO.   .O:                  
.OOZ...OOO.        ..OOOOO.OOOOOOO.OOOOOOOOZ.    .Z..                 
.OOOOOOOOO         .ZOOOOO.OOOOO..OOOOOOOO~      .Z                   
 .OOOOOOO.         .OOOOOO.OZZ..OOOOOOOOO.      .?O                   
  .OOOOOI.        .OOOOOOO..,ZOOOOOOOOOO..      .O.                   
   .OOOOZ.      ..ZOOOOOOOOOOOOOOOOOOOO~        .O.                   
   .OOOOO= .....ZOOOOOOOOOOOOOOOOOOOOOO.      ..O.                    
   ..OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ       .,OO.                    
    .ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.     ...OO..                    
     .OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.   ...OO.                       
     ..ZOOOOOOOOOOOOOOOOOOOOOOOOOOOO.... OZO..                        
      ...OOOOOOOOOOOOOOOOOOOOOOOOOOZOOOZO...                          
          .....~OOOOOOOOOOOOOOOOO:........                            
                ................
--></head><body id='blog'><header id='mobile-header'><div class='wrap'><a class='header-logo' href='/'>DockYard</a><div class='menu-button'></div></div><ul class='flexnav' data-breakpoint='481' id='mobile-nav'><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com'><span class='mobile-nav-icon fontello'>h</span><p class='main-nav-item'>Home</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/work'><span class='mobile-nav-icon fontello'>w</span><p class='main-nav-item'>Work</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/team'><span class='mobile-nav-icon fontello'>p</span><p class='main-nav-item'>Team</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/community'><span class='mobile-nav-icon fontello'>c</span><p class='main-nav-item'>Community</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='/'><span class='mobile-nav-icon fontello'>b</span><p class='main-nav-item'>Blog</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/contact'><span class='mobile-nav-icon fontello'>m</span><p class='main-nav-item'>Contact</p></a></li></ul></header><header id='site-header'><div class='wrap'><h1><a class='header-logo' href='http://dockyard.com'>DockYard</a></h1><ul class='main-nav'><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/work'>Work</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/team'>Team</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/community'>Community</a></li><li class='nav-work'><a class='main-nav-item' href='/'>Blog</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/contact'>Contact</a></li></ul></div></header><section id='content'><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-06-19T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Michael Dupuis is a DockYarder</title>
    <link rel="alternate" href="/announcement/2013/06/19/michael-dupuis-is-a-dockyarder.html"/>
    <id>/announcement/2013/06/19/michael-dupuis-is-a-dockyarder.html</id>
    <published>2013-06-19T00:00:00Z</published>
    <updated>2013-06-19T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/dupuis.jpg" alt="Michael"&gt;
Recently we added another great mind to the DockYard team: Michael
Dupuis. Mike joins our Boston office and has already been busy building
out client apps in Ruby on Rails and Ember.js for us! He also comes with
some design chops. Welcome Mike!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Marin Abernethy is a DockYarder</title>
    <link rel="alternate" href="/announcement/2013/06/19/marin-abernethy-is-a-dockyarder.html"/>
    <id>/announcement/2013/06/19/marin-abernethy-is-a-dockyarder.html</id>
    <published>2013-06-19T00:00:00Z</published>
    <updated>2013-06-19T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/abernethy.jpg" alt="Marin"&gt;
Marin comes to us as from Trinity College for the summer. We&amp;#39;ve been
overwhelming her with Ruby, Linux, SQL, JavaScript, and VIM. She&amp;#39;s
excelled and we&amp;#39;re excited to see what she can accomplish over the
remainder of the summer.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tilde's Ember Training</title>
    <link rel="alternate" href="/ember/2013/05/09/tildes-ember-training.html"/>
    <id>/ember/2013/05/09/tildes-ember-training.html</id>
    <published>2013-05-09T00:00:00Z</published>
    <updated>2013-05-09T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;A couple weeks ago, Yehuda Katz and Tom Dale of &lt;a href="http://tilde.io"&gt;Tilde&lt;/a&gt; ran
their 3-day &lt;a href="http://www.tilde.io/training/"&gt;Introduction to Ember.js Training&lt;/a&gt;
at &lt;a href="http://bocoup.com/"&gt;Bocoup&lt;/a&gt; here in Boston. I, along with Amanda,
Doug and Chris, attended the training.&lt;/p&gt;

&lt;h2&gt;Format&lt;/h2&gt;

&lt;p&gt;Throughout the training, attendees were building a simplified Rdio/Spotify clone
using Ember. It was broken up into a series of exercises, which built
upon each other. The exercises were test driven, each having set of QUnit tests that defined the
exercise. Before each exercise, Tom and Yehuda would explain and demo
the concepts via slides and JSBin.&lt;/p&gt;

&lt;h3&gt;Day 1&lt;/h3&gt;

&lt;p&gt;Day 1 was spent outlining the core concepts of
&lt;a href="http://handlebarsjs.com"&gt;Handlebars&lt;/a&gt; and Ember. We
started with Handlebars, which is what Ember uses as its templating
language. After covering the basics of Handlebars, we learned about how
&lt;a href="http://emberjs.com/guides/routing/"&gt;Ember handles routing and outlets&lt;/a&gt;.
After we finished routing, we moved onto creating Handlebars helper
functions.&lt;/p&gt;

&lt;h3&gt;Day 2&lt;/h3&gt;

&lt;p&gt;On day 2, we started off with
&lt;a href="http://emberjs.com/guides/controllers/"&gt;Ember controllers&lt;/a&gt; and how they
serve as proxy objects for the model of your current resource. After
controllers, we covered
&lt;a href="http://emberjs.com/guides/object-model/computed-properties/"&gt;computed properties&lt;/a&gt;.
&lt;a href="http://emberjs.com/guides/views/"&gt;Views&lt;/a&gt; followed computed properties,
then we wrapped up the day with creating custom controls with Ember and
Handlebars.&lt;/p&gt;

&lt;h3&gt;Day 3&lt;/h3&gt;

&lt;p&gt;Once we had built the majority of the app, we had a couple more
exercises that built upon all the exercise we had completed. Tom and
Yehuda also went over how we would use
&lt;a href="http://eviltrout.com/2013/03/23/ember-without-data.html"&gt;Ajax requests to pull in data from a remote source with Promises&lt;/a&gt;.
After wrapping up the remainder of the exercises, we covered how the
&lt;a href="http://stackoverflow.com/questions/13597869/what-is-ember-runloop-and-how-does-it-work"&gt;Ember Run Loop works&lt;/a&gt;,
and discussed approaches to testing Ember applications.&lt;/p&gt;

&lt;h2&gt;Feedback&lt;/h2&gt;

&lt;p&gt;Yehuda and Tom provided a great balance of not-to-dense information,
useful demos and exercises. They did a great job of, what Tom stated as,
&amp;quot;Providing a sufficient level of confusion&amp;quot; in the exercises. Before
each exercise, they would provide all the information needed for the
exercise, but would not give you a list of steps to complete the task.
You may struggle a bit, but they answer any questions you would
have during the exercise. This would help the attendees actually learn
the concepts, rather than just copy/paste a set of code and modify it
here and there and have it work. I, personally, felt that this worked
really well.&lt;/p&gt;

&lt;p&gt;I have worked on a couple side project with Ember before taking this
training, and had a very shallow understanding of some of the concepts.
Coming out of this training, I feel I have a great place to start building
Ember apps. I really fleshed out my understanding of Ember and am really
excited about the technology. I am planning on using it for
any upcoming side projects, to really explore it further. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Context Validations</title>
    <link rel="alternate" href="/ruby/2013/05/09/context-validations.html"/>
    <id>/ruby/2013/05/09/context-validations.html</id>
    <published>2013-05-09T00:00:00Z</published>
    <updated>2013-05-09T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I just released a new &lt;a href="https://github.com/dockyard/context_validations"&gt;gem called ContextValidations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ContextValidations allows you to set validations on the instance of
ActiveRecord models. Any class-level validations you have already set
in your models are ignored. You may be asking yourself &amp;quot;Whaaaaaat?&amp;quot; so
let&amp;#39;s look into why.&lt;/p&gt;

&lt;h2&gt;Conditional Validations Are A Smell&lt;/h2&gt;

&lt;p&gt;When applications grow in complexity the validation models required to
support them usually grow too. Eventually you will have to &amp;quot;work around&amp;quot;
the validations with conditionals that rely upon state flags. In some
cases you end up writing empty model objects for use with your forms to
avoid the mess that conditional validations introduce.&lt;/p&gt;

&lt;p&gt;The problem here is that the model is defining a single set of
validations but the model needs to absorb different sets of data under
different circumstances. Imagine you have a user account that where
depending upon how the users get to your app will depend upon what data
they need to provide. You might also be importing data from an external
incomplete data set. Do you set these records aside into another table
until the records are claimed and the user can complete registration? Or
do you allow the records to save and have the model enter a state of
&lt;code&gt;unclaimed&lt;/code&gt; to avoid authentication until &lt;code&gt;claimed&lt;/code&gt;? You could just
avoid the validations all together but you definitely don&amp;#39;t want to
allow records that don&amp;#39;t have the most basic of identifying information
such as &lt;code&gt;email&lt;/code&gt; or &lt;code&gt;username&lt;/code&gt; to be saved.&lt;/p&gt;

&lt;p&gt;You can imagine with this scenario the current solution with Rails is
either a very complex and messy validation model or breaking things out
into other models and having a strategy to reconciling that at a later
point in time.&lt;/p&gt;

&lt;h2&gt;Context Matters&lt;/h2&gt;

&lt;p&gt;I have come to believe that defining a monolithic validation set in your
model is the wrong way to go. Context matters. If I am an admin I should
be able to write data to a record that might not be acceptable to a
regular user. Even the simple case of not requiring a password unless
the record is new.&lt;/p&gt;

&lt;h3&gt;Controllers Are the Context&lt;/h3&gt;

&lt;p&gt;I believe the rule of &amp;quot;Fat Model, Skinny Controller&amp;quot; has conditioned
Rails developers to never ever put anything more than a few lines of
code into your controllers. For the most part this is a good trend. But
as we have seen with &lt;a href="https://github.com/rails/strong_parameters"&gt;Strong Parameters&lt;/a&gt; 
there are circumstances where adding a few more lines to our controllers
isn&amp;#39;t going to end the world. I submit the case is also true for
validations. The controller is the context in which the user is
interacting with the data. Going back to the admin example, you most
likely have a &lt;code&gt;UsersController&lt;/code&gt; and an &lt;code&gt;Admin::UsersController&lt;/code&gt; defined.
Two controllers, same data. Different contexts. Not only should you
allow mass assignment to the models differently for each context but
what is considered &amp;quot;valid data&amp;quot; should also be different.&lt;/p&gt;

&lt;h2&gt;Context Validations&lt;/h2&gt;

&lt;p&gt;To handle this need I have just released
&lt;a href="https://github.com/dockyard/context_validations"&gt;ContextValidations&lt;/a&gt;.
The goals of this gem are simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Maintain simplicity&lt;/li&gt;
&lt;li&gt;Enable instance level validations&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t deviate from exisitng Rails validations&lt;/li&gt;
&lt;li&gt;Backwards compatibility with 3rd party libraries&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before I dive into each one let&amp;#39;s see how a set of validations might be
applied in a controller&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;UsersController&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ApplicationController&lt;/span&gt;
  include &lt;span class="constant"&gt;ContextValidations&lt;/span&gt;::&lt;span class="constant"&gt;Controller&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;create&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@user&lt;/span&gt; = &lt;span class="constant"&gt;User&lt;/span&gt;.new(user_params)
    &lt;span class="instance-variable"&gt;@user&lt;/span&gt;.validations = validations(&lt;span class="symbol"&gt;:create&lt;/span&gt;)
    &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="instance-variable"&gt;@user&lt;/span&gt;.save
      &lt;span class="comment"&gt;# happy path&lt;/span&gt;
    &lt;span class="keyword"&gt;else&lt;/span&gt;
      &lt;span class="comment"&gt;# sad path&lt;/span&gt;
    &lt;span class="keyword"&gt;end&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;base_validations&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:first_name&lt;/span&gt;, &lt;span class="symbol"&gt;:last_name&lt;/span&gt; &lt;span class="symbol"&gt;:email&lt;/span&gt;, &lt;span class="symbol"&gt;:presence&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:email&lt;/span&gt;, &lt;span class="symbol"&gt;:uniqueness&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;, &lt;span class="symbol"&gt;:format&lt;/span&gt; =&amp;gt; &lt;span class="constant"&gt;EmailFormat&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="symbol"&gt;:confirmation&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;create_validations&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="symbol"&gt;:presence&lt;/span&gt; =&amp;gt; &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Maintain Simplicity&lt;/h3&gt;

&lt;p&gt;At this point some of you are probably thinking &lt;a href="http://rhnh.net/2012/12/03/form-objects-in-rails"&gt;Form Objects&lt;/a&gt;.
Perhaps in the end, Form Objects will be the real answer for what I
strive for. But right now I don&amp;#39;t see a justification for the increase
in complexity. &lt;code&gt;ContextValidations&lt;/code&gt; has attempted to keep the complexity
as low as possible while still allowing for flexibility. The
&lt;code&gt;ContextValidations::Controller&lt;/code&gt; module can be mixed into any object,
not just controllers. Let&amp;#39;s say you had a &lt;a href="http://stevelorek.com/service-objects.html"&gt;Service Object&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;UserService&lt;/span&gt;
  include &lt;span class="constant"&gt;ContextValidations&lt;/span&gt;::&lt;span class="constant"&gt;Controller&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(params)
    &lt;span class="instance-variable"&gt;@params&lt;/span&gt; = params
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;create&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@user&lt;/span&gt; = &lt;span class="constant"&gt;User&lt;/span&gt;.new(create_params)
    &lt;span class="instance-variable"&gt;@user&lt;/span&gt; = validations(&lt;span class="symbol"&gt;:create&lt;/span&gt;)
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;At this point the code looks identitly to the controller example from
above. The validations are accessible anywhere, from any object.&lt;/p&gt;

&lt;h3&gt;Instance level validations&lt;/h3&gt;

&lt;p&gt;The real key here is that the instance of the model is able to declare
what its validations are rather than the class. To that end you must
mixin the &lt;code&gt;ContextValidations::Model&lt;/code&gt; module into any model you want to
use &lt;code&gt;ContextValidations&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;User&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  include &lt;span class="constant"&gt;ContextValidations&lt;/span&gt;::&lt;span class="constant"&gt;Model&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This mixin will do several things to you &lt;code&gt;ActiveRecord&lt;/code&gt; model&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A &lt;code&gt;#validations&lt;/code&gt; setter and getter is added. The default for
&lt;code&gt;#validations&lt;/code&gt; is an empty array. When any arrays are assigned they are
wrapped in an array and falttened out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;:validate&lt;/code&gt; callbacks are completed removed. This allows the
model to accept validations set on the class by 3rd party libraries but
these validations will never run.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;#run_validations!&lt;/code&gt; protected method is overwritten to run
through the instance level validations instead of running the
&lt;code&gt;:validate&lt;/code&gt; callback.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Don&amp;#39;t deviate from exisitng Rails validations&lt;/h3&gt;

&lt;p&gt;The only difference from writing your validations now is they are
written on the instance. The &lt;code&gt;#validates&lt;/code&gt; method functions exactly the
same way. You can still pass conditional validations if you&amp;#39;d like but I
wouldn&amp;#39;t recommend it.&lt;/p&gt;

&lt;h3&gt;Backwards compatibility with 3rd party libraries&lt;/h3&gt;

&lt;p&gt;As mentioned above we don&amp;#39;t want your Rails app to crash if 3rd party
libraries are declaring regular Rails validations in your models. They
are just ignored.&lt;/p&gt;

&lt;h2&gt;Moving forward&lt;/h2&gt;

&lt;p&gt;There are a few directions things could move in. I still haven&amp;#39;t come
up with a simple way to test &lt;code&gt;ContextValidations&lt;/code&gt;. There will also be
validations that are always used regardless of the context. I don&amp;#39;t
think it makes sense to constantly rewrite these validations. One
possibility would be to consider the class validations the
&lt;code&gt;base_validations&lt;/code&gt; that are always run then you can declare context
validations on the instance. This might cause issues with 3rd party
libraries that are using conditional validations. But, we could easily
get around that by ignoring any class level validations that have
conditionals on them.&lt;/p&gt;

&lt;p&gt;I am eager to get feedback on this. I am sure this might cause some
friction as it moves outside of the comfort zone for many Rails devs but
now I am happy with the direction.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Thoughts on Designing Responsive Websites</title>
    <link rel="alternate" href="/design/2013/04/26/thoughts-on-designing-responsive-websites.html"/>
    <id>/design/2013/04/26/thoughts-on-designing-responsive-websites.html</id>
    <published>2013-04-26T00:00:00Z</published>
    <updated>2013-04-26T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Things I have learned about the design process of making responsive websites:&lt;/p&gt;

&lt;h2&gt;Design Mobile First&lt;/h2&gt;

&lt;p&gt;Why do I like to design for narrower screen sizes first? Because it places emphasis on hierarchy and content organization. It prioritizes making decisions about organizing the content of the site, which of course is the most important part! (Take a look at some of &lt;a href="http://karenmcgrane.com/category/content-strategy/"&gt;Karen McGrane&amp;#39;s stuff&lt;/a&gt; if you want to read more about content strategy) Which sections make the most sense near each other? Does the layout order make it easy for a user to find what she or he is looking for? Imagine how disjointed it could be for a mobile user if the content groupings didn&amp;#39;t flow in context among each other. Figuring all this out before moving on to designing wider screen sizes can be very helpful. Everything can&amp;#39;t be shoved &lt;a href="http://iampaddy.com/lifebelow600/"&gt;&amp;quot;above the fold&amp;quot;&lt;/a&gt; in mobile. Say goodbye to hearing that everything is important!&lt;/p&gt;

&lt;h2&gt;Don&amp;#39;t Fight the Web, Work With It!&lt;/h2&gt;

&lt;p&gt;Think ahead about how design elements are going to be implemented during initial design stages. Can it be written out of CSS? Maybe some elements can&amp;#39;t be, but let&amp;#39;s keep those to a minimal. With all the fancy CSS3 things we can do now, we shouldn&amp;#39;t have to open up Photoshop to make design edits. In the way that form should follow function, allow implementation to inform design. This is not an argument against &lt;a href="http://sachagreif.com/flat-pixels/"&gt;skeuomorphism&lt;/a&gt;, but it just so happens that flatter designs tend to be more web-friendly. Sorry, pirate scrolls. Not sorry.&lt;/p&gt;

&lt;h2&gt;Get in the Browser ASAP&lt;/h2&gt;

&lt;p&gt;After laying out a few basic wireframes, I like to jump right into HTML and CSS (or really, &lt;a href="http://haml.info/"&gt;HAML&lt;/a&gt; and &lt;a href="http://sass-lang.com/"&gt;SASS&lt;/a&gt;). Whether you start on paper, Illustrator, or Photoshop, the design won&amp;#39;t look like how it&amp;#39;s really going to look until it&amp;#39;s in the browser. It makes more sense for me to get right in to iterations while seeing how layouts are behaving at different screen sizes. I find myself doing a lot of trial and error because I can never be sure of what may or may not work. If I think of a possible solution, I try it out. If it doesn&amp;#39;t work better than what I had, I&amp;#39;ll revert it and try something else. The majority of my designing and problem-solving happens in the browser now where I can shrink and expand the width of the window to see how everything is coming together. For me, getting right into this &lt;a href="http://en.wikipedia.org/wiki/Iterative_design"&gt;iterative design&lt;/a&gt; process beats out creating thorough mockups that will only represent so little of the &amp;quot;final product&amp;quot;.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s a lot of stuff to know so the best way to learn is to dive right in!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Writing User Stories</title>
    <link rel="alternate" href="/process/2013/04/10/writing-user-stories.html"/>
    <id>/process/2013/04/10/writing-user-stories.html</id>
    <published>2013-04-10T00:00:00Z</published>
    <updated>2013-04-10T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;User Story Writing Basics&lt;/h2&gt;

&lt;p&gt;The goal in writing user stories is to establish a human voice at every step of the development process. This can be a difficult picture for technically minded developers to imagine, who base a majority of their decisions on logic and efficiency. Each story must determine one of the functions that a finalized product will perform while also acknowledging the social and cultural context surrounding that function.&lt;/p&gt;

&lt;p&gt;Language can be deceptive in conveying story goals. In the story-carding phase, take measures to eliminate technical jargon that could confuse non-developers. Story cards are only prompts that need to be expanded on through ongoing conversation between users, developers, and other individuals within a carefully selected customer team.&lt;/p&gt;

&lt;p&gt;The customer team should reflect the unique functions of the product under development. It operates as the central hub in maintaining the balance between business and tech interests. It should combine thinkers who represent general and targeted user interests with developers and other skilled individuals. This will help direct the development of the product by prioritizing stories based on what users are most interested in seeing in the final product. Additional stories can be prioritized in interactions following initial release based on the extent of desired development.&lt;/p&gt;

&lt;h2&gt;6 Parameters For User Stories&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Each story should be Independent so that product development can be easily broken down and reorganized. Avoid unnecessary entanglement with other stories to maintain flexibility and freedom in the design process.&lt;/li&gt;
&lt;li&gt;The customer team should make changes and negotiate stories to ensure that all relevant perspectives are acknowledged. This is essential to maintaining an agile development process through multiple iterations.&lt;/li&gt;
&lt;li&gt;Let the concept behind the technology shine brightest. Use careful phrasing to ensure that users are able to look at the stories and acknowledge how each is valuable to the product experience.&lt;/li&gt;
&lt;li&gt;Write stories that can be easily calculated. While abstract language may be necessary to communicate technical concepts with users, every story should be rooted in a logical and quantifiable plan for development.&lt;/li&gt;
&lt;li&gt;Each story is just a unit in a much greater epic. Keep them small to maintain maximum control over the design process and reduce miscalculations in time and cost estimation.&lt;/li&gt;
&lt;li&gt;Finally, all stories must be testable. There must be a logical set of criteria to designate whether or not a story has achieved its purpose. A rigorous testing plan will reduce long-term costs in maintenance and development.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some suggested methods for gathering user stories are interviews, questionnaires, observations and story-writing workshops. It is important to note that the best data collection methods should be as diverse as the range of users themselves, encompassing a wide range of information gathering tactics. This will give the customer team a wealth of knowledge to analyze and story-card. Some users might be more assertive about their opinion in an interview with developers while others may prefer story-writing workshops. Take into account the nature of the project itself and what implications it might have for response rate. Users may prefer to respond to some more sensitive subject material through an anonymous questionnaire or survey.&lt;/p&gt;

&lt;p&gt;In some circumstances, especially for developers working within limited resources or without a well-organized customer team, user role modeling could help generate a clearer picture for user story formation. Create hypothetical users who reflect real-world populations that are inclined to use the product. It might help to draw up a couple user profiles to address multiple lifestyle-types that the product could be used within. This could be especially helpful in designing products for foreign markets or third world countries where the adoption of technology does not follow the western standard.&lt;/p&gt;

&lt;p&gt;For a more in-depth description see Mike Cohn&amp;#39;s book &lt;a href="http://www.amazon.com/User-Stories-Applied-Software-Development/dp/0321205685"&gt;User Stories Applied&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
</section><footer><ul class='footer-links'><li><a class='link link-in-footer fontello' href='https://github.com/DockYard' target='_blank'>g</a></li><li><a class='link link-in-footer fontello' href='https://twitter.com/DockYard' target='_blank'>t</a></li><li><a class='link link-in-footer fontello' href='http://reefpoints.dockyard.com/atom.xml' target='_blank'>r</a></li><li><a class='link link-in-footer fontello' href='http://dockyard.com/contact' target='_blank'>m</a></li></ul><form class='footer-form'><label class='footer-form-label'>Get in touch with us!</label><input class='footer-form-input' placeholder='Email' type='text'><button class='footer-form-submit fontello' href='http://dockyard.com/contact'>R</button></form><a class='footer-number' href='tel:855-362-5973'>(855) DOCK-YRD</a><p class='footer-copyright'>&copy; 2013 DockYard, LLC. All Rights Reserved.</p></footer><audio class='foghorn' preload='auto' src='/sound/foghorm.mp3'></audio><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>