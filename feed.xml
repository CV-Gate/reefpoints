<!DOCTYPE html><html><head><title>DockYard ~ Ruby on Rails and Ember.js Development | Boston-based Web &amp; Mobile Software Consultancy</title><link href="/stylesheets/all-5eb29058.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-d0af4672.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta content='DockYard.com - ' name='description'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                                                    ..
                                                                 ,Z+O.
                                                              .OO.O..
                                                             OZ..O.
                                                         ..OO..87.
                                                        .O7O..O...
                                                      .O...Z~O.
                                                   .:Z~. ..Z..
                                                  +O.O   .8..
                                     ...       .OO.  O  O?.
                             ..ZOOOOOOOOOZOOO.ZOZ.   .OO..
                           .OOOOOOOOOOOOOOOOOO..Z.   $O.
                         .ZOOOOOOOOOOOOOOOOOO.  .O..O.
                        .ZOOOOOOOOOOOOOOOOOOOZ  .:O$.
                        OZOOOOOOOOOOO...OOOOOOOZ$ZO
                      ..OOOOOOOOOOOOO  .OOOOOOOOOOO..
                      .OOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                      .OOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                      OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     .OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     :OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                     OOOOOOOOOOOOOOOOOOOOOOOOOOOO7OO.
                     ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                     OOOOOOZOOOOOOOO.ZOOOOOOOOOOO7OO.
                     ZOOOOO.OOOOOOOO.OOOOOOOOOO.  OO.
...     ..           OOOOO.OOOOOOOO.OOOOOOOOO.   .O:
.OOZ...OOO.        ..OOOOO.OOOOOOO.OOOOOOOOZ.    .Z..
.OOOOOOOOO         .ZOOOOO.OOOOO..OOOOOOOO~      .Z
 .OOOOOOO.         .OOOOOO.OZZ..OOOOOOOOO.      .?O
  .OOOOOI.        .OOOOOOO..,ZOOOOOOOOOO..      .O.
   .OOOOZ.      ..ZOOOOOOOOOOOOOOOOOOOO~        .O.
   .OOOOO= .....ZOOOOOOOOOOOOOOOOOOOOOO.      ..O.
   ..OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ       .,OO.
    .ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.     ...OO..
     .OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.   ...OO.
     ..ZOOOOOOOOOOOOOOOOOOOOOOOOOOOO.... OZO..
      ...OOOOOOOOOOOOOOOOOOOOOOOOOOZOOOZO...
          .....~OOOOOOOOOOOOOOOOO:........
                ................
--></head><body id='blog'><header id='mobile-header'><div class='wrap'><a class='header-logo' href='/'>DockYard</a><div class='menu-button'></div></div><ul class='flexnav' data-breakpoint='481' id='mobile-nav'><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com'><span class='mobile-nav-icon fontello'>h</span><p class='main-nav-item'>Home</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/work'><span class='mobile-nav-icon fontello'>w</span><p class='main-nav-item'>Work</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/team'><span class='mobile-nav-icon fontello'>p</span><p class='main-nav-item'>Team</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/community'><span class='mobile-nav-icon fontello'>c</span><p class='main-nav-item'>Community</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='/'><span class='mobile-nav-icon fontello'>b</span><p class='main-nav-item'>Blog</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/contact'><span class='mobile-nav-icon fontello'>m</span><p class='main-nav-item'>Contact</p></a></li></ul></header><header id='site-header'><div class='wrap'><h1><a class='header-logo' href='http://dockyard.com'>DockYard</a></h1><ul class='main-nav'><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/work'>Work</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/team'>Team</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/community'>Community</a></li><li class='nav-work'><a class='main-nav-item current' href='/'>Blog</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/contact'>Contact</a></li></ul></div></header><section id='content'><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-08-20T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Design Patterns: The Observer Pattern</title>
    <link rel="alternate" href="/2013/08/20/design-patterns-observer-pattern.html"/>
    <id>/2013/08/20/design-patterns-observer-pattern.html</id>
    <published>2013-08-20T00:00:00Z</published>
    <updated>2013-08-20T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Note: We won&amp;#39;t be going over the Ruby
module
&lt;a href="http://ruby-doc.org/stdlib-2.0/libdoc/observer/rdoc/Observable.html"&gt;&lt;em&gt;Observable&lt;/em&gt;&lt;/a&gt;.
Instead, we&amp;#39;ll building out the pattern ourselves.&lt;/p&gt;

&lt;h2&gt;Your First Day at the NSA&lt;/h2&gt;

&lt;p&gt;Welcome to the National Security Agency, &lt;a href="http://www.forodecostarica.com/attachments/201136d1337091462-los-gringos-se-burlan-de-nuestro-pais-agent-smith.jpg"&gt;Agent
Smith&lt;/a&gt;.
You have quite an impressive background, and we believe your &amp;quot;go-getter&amp;quot;
attitude will instill a new kind of vigor within the organization.&lt;/p&gt;

&lt;p&gt;Your cubicle is down to the left... here are some NDAs for
you to fill out. I&amp;#39;ll swing by your desk in the afternoon and pick them
up from you later. Oh, and before I forget, here is your first assignment.&lt;/p&gt;

&lt;p&gt;Go get &amp;#39;em, tiger!&lt;/p&gt;

&lt;h2&gt;The First Assignment&lt;/h2&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Agent Smith
Spook First Class
[REDACTED]
NSA                                                     08-20-[REDACTED]

                     Operation [REDACTED] Observers

Welcome, Agent Smith:

Bluntly, we'd like to track everyone's emails.

Attached are two documents.

The first document will show you the basic structure of a typical email,
and the second document will provide you a basic profile of a suspicious
person.

If there are any questions, please reach me at [REDACTED].

Best of luck,





Agent [REDACTED]
[REDACTED]
[REDACTED]
NSA
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Document 1:&lt;/span&gt;
&lt;span class="comment"&gt;# Basic structure of an email&lt;/span&gt;

&lt;span class="keyword"&gt;module&lt;/span&gt; &lt;span class="class"&gt;Email&lt;/span&gt;
  extend &lt;span class="predefined-constant"&gt;self&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;send&lt;/span&gt;(subject, sender, receiver)
    puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;%Q[&lt;/span&gt;&lt;span class="content"&gt;
      Subject: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;subject&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;
      From:    &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;sender&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;@example.com
      To:      &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;receiver&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;@example.com
      Date:    &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;&lt;span class="constant"&gt;Time&lt;/span&gt;.now.asctime&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;
    &lt;/span&gt;&lt;span class="delimiter"&gt;]&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Document 2:&lt;/span&gt;
&lt;span class="comment"&gt;# Characteristics of a suspicious person&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Person&lt;/span&gt;
  include &lt;span class="constant"&gt;Email&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:name&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(name)
    &lt;span class="instance-variable"&gt;@name&lt;/span&gt; = name
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;send_email&lt;/span&gt;(subject, receiver)
    &lt;span class="constant"&gt;Email&lt;/span&gt;.send(subject, name, receiver)
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As we look through the &lt;code&gt;Email&lt;/code&gt; module, we see that it contains
&lt;code&gt;Email.send&lt;/code&gt; which takes three arguments: &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;sender&lt;/code&gt;, and
&lt;code&gt;receiver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Gazing at the suspicious &lt;code&gt;Person&lt;/code&gt; class, we see that it includes the
&lt;code&gt;Email&lt;/code&gt; module. &lt;code&gt;Person#send_email&lt;/code&gt; takes two parameters: a subject
and a receiver. &lt;code&gt;Person#name&lt;/code&gt; will stand in as the sender of the email.&lt;/p&gt;

&lt;p&gt;Hypothetically, let&amp;#39;s see how a suspicious person would send an email:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;bill = Person.new 'Bill'
bill.send_email 'Fishing Trip', 'Fred'
  # =&amp;gt;
      Subject: Fishing Trip
      From:    Bill@example.com
      To:      Fred@example.com
      Date:    Wed Aug 16 20:35:09 2006
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hmm... as you sit in your cubicle, you ponder the numerous possible ways of
tracking emails. You won&amp;#39;t need anything too complicated, just
something to kick off a notification once an email has been sent.&lt;/p&gt;

&lt;p&gt;Volia! You realize you can use the &lt;em&gt;Observer&lt;/em&gt; pattern!&lt;/p&gt;

&lt;h2&gt;The Subject and its Observers&lt;/h2&gt;

&lt;p&gt;First, let&amp;#39;s start off by creating two &lt;em&gt;observer&lt;/em&gt; classes,
&lt;code&gt;Alert&lt;/code&gt; and &lt;code&gt;Agent&lt;/code&gt; classes.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Alert&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;gotcha&lt;/span&gt;(person)
    puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;!!! ALERT: &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;person.name.upcase&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; SENT AN EMAIL !!!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Agent&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;gotcha&lt;/span&gt;(person)
    puts &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;!!! TIME TO DETAIN &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;person.name.upcase&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt; !!!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, let&amp;#39;s create a &lt;code&gt;Subject&lt;/code&gt; module.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;module&lt;/span&gt; &lt;span class="class"&gt;Subject&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:observers&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;
    &lt;span class="instance-variable"&gt;@observers&lt;/span&gt; = []
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;add_observer&lt;/span&gt;(*observers)
    observers.each { |observer| &lt;span class="instance-variable"&gt;@observers&lt;/span&gt; &amp;lt;&amp;lt; observer }
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;delete_observer&lt;/span&gt;(*observers)
    observers.each { |observer| &lt;span class="instance-variable"&gt;@observers&lt;/span&gt;.delete(observer) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;notify_observers&lt;/span&gt;
    observers.each { |observer| observer.gotcha(&lt;span class="predefined-constant"&gt;self&lt;/span&gt;) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here within the &lt;code&gt;Subject#initialize&lt;/code&gt;, we create an empty array which
will contain a list of &lt;em&gt;observers&lt;/em&gt;. &lt;code&gt;Subject#add_observer&lt;/code&gt; simply pushes
our desired &lt;em&gt;observers&lt;/em&gt; into the array.&lt;/p&gt;

&lt;p&gt;Finally, we can alter the suspicious &lt;code&gt;Person&lt;/code&gt; class, which will act as
the &lt;em&gt;subject&lt;/em&gt; class. Let&amp;#39;s include the &lt;code&gt;Subject&lt;/code&gt; module now.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Person&lt;/span&gt;
  include &lt;span class="constant"&gt;Email&lt;/span&gt;, &lt;span class="constant"&gt;Subject&lt;/span&gt;
  attr_reader &lt;span class="symbol"&gt;:name&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt;(name)
    &lt;span class="comment"&gt;# 'super' requires a parentheses because we're calling&lt;/span&gt;
    &lt;span class="comment"&gt;# super on the superclass, 'Subject'&lt;/span&gt;
    &lt;span class="keyword"&gt;super&lt;/span&gt;()
    &lt;span class="instance-variable"&gt;@name&lt;/span&gt; = name
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;send_email&lt;/span&gt;(subject, receiver)
    &lt;span class="constant"&gt;Email&lt;/span&gt;.send(subject, name, receiver)
    notify_observers
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Subject#notify_observers&lt;/code&gt; calls &lt;code&gt;#gotcha&lt;/code&gt; on each &lt;em&gt;observer&lt;/em&gt;, which
informs each &lt;em&gt;observer&lt;/em&gt; that &lt;code&gt;Person#send_email&lt;/code&gt; has been kicked off.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s give it a whirl...&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;alert = Alert.new
agent = Agent.new

bill = Person.new 'Bill'

bill.add_observer alert, agent   # Bill now has two observers watching him

bill.send_email 'Fishing Trip', 'Fred'
  # =&amp;gt;
      Subject: Fishing Trip
      From:    Bill@example.com
      To:      Fred@example.com
      Date:    Wed Aug 16 20:35:09 2006

!!! ALERT: BILL SENT AN EMAIL !!!
!!! TIME TO DETAIN BILL !!!
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Perfect, it works! Now we can start protecting our freedom!&lt;/p&gt;

&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;p&gt;In our example above, we have two &lt;em&gt;observers&lt;/em&gt;, the &lt;code&gt;Alert&lt;/code&gt; and &lt;code&gt;Agent&lt;/code&gt;
classes, and a &lt;em&gt;subject&lt;/em&gt;, &lt;code&gt;Person&lt;/code&gt;. By creating the &lt;code&gt;Subject&lt;/code&gt; module,
any instance of &lt;code&gt;Person&lt;/code&gt; now informs and updates any &lt;em&gt;observer&lt;/em&gt; through
&lt;code&gt;#notify_observers&lt;/code&gt;, ultimately removing any implicit coupling from &lt;code&gt;Alert&lt;/code&gt; and
&lt;code&gt;Agent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are a few similarities between the &lt;em&gt;Observer&lt;/em&gt; and
&lt;a href="http://reefpoints.dockyard.com/2013/07/25/design-patterns-strategy-pattern.html"&gt;&lt;em&gt;Strategy&lt;/em&gt;&lt;/a&gt;
patterns. Both patterns employ an object (the Observer&amp;#39;s &lt;em&gt;subject&lt;/em&gt; and
the Strategy&amp;#39;s &lt;em&gt;context&lt;/em&gt;) that makes calls to another object (the
Observer&amp;#39;s &lt;em&gt;observer&lt;/em&gt; or Strategy&amp;#39;s &lt;em&gt;strategy&lt;/em&gt;). The difference between
the two patterns is the purpose and use case. The &lt;em&gt;Strategy&lt;/em&gt; pattern
relies on the &lt;em&gt;strategy&lt;/em&gt; to do the work, while the &lt;em&gt;Observer&lt;/em&gt; pattern
informs the &lt;em&gt;observers&lt;/em&gt; of what is going on with the &lt;em&gt;subject&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed this short example, thanks for reading!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Testing Context Validations</title>
    <link rel="alternate" href="/2013/08/05/testing-context-validations.html"/>
    <id>/2013/08/05/testing-context-validations.html</id>
    <published>2013-08-05T00:00:00Z</published>
    <updated>2013-08-05T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Quick Refresher on ContextValidation&lt;/h2&gt;

&lt;p&gt;A few months ago, Brian released the &lt;a href="http://reefpoints.dockyard.com/ruby/2013/05/09/context-validations.html"&gt;ContextValidations gem&lt;/a&gt;.
ContextValidations moves your model validations to the controller,
allowing you to vary your validations by context, rather than relying on
conditional validations.&lt;/p&gt;

&lt;h2&gt;Let&amp;#39;s validate our user&lt;/h2&gt;

&lt;p&gt;We have a user model, that requires a password and a username when a
user signs up. They can change their username and password, but if they
can leave the password blank when updating their account, it will retain
the old password. Whenever they enter a password , it must be 9
characters or greater. We&amp;#39;re going to ignore the actual implementation
of the password saving scheme and password confirmation in this example.
Also, this example ignores setting up the test helper for &lt;a href="https://github.com/bcardarella/valid_attribute"&gt;valid_attribute&lt;/a&gt;
and MiniTest::Spec.&lt;/p&gt;

&lt;h3&gt;Implementing the Tests and Validations in the Model&lt;/h3&gt;

&lt;p&gt;To test the above requirements model validations, we&amp;#39;d do the following:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;describe &lt;span class="constant"&gt;OldUser&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;new user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    subject { &lt;span class="constant"&gt;OldUser&lt;/span&gt;.new &lt;span class="key"&gt;password&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;password_to_confirm&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }

    it { must have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;) }
    it { must have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;validpassword1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tooshort&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;existing user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    subject { old_users(&lt;span class="symbol"&gt;:example&lt;/span&gt;) }

    it { must have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;) }
    it { must have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;validpassword1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tooshort&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And here is the implementation of the model:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;OldUser&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  attr_accessor &lt;span class="symbol"&gt;:password&lt;/span&gt;
  validates &lt;span class="symbol"&gt;:username&lt;/span&gt;, &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;, &lt;span class="key"&gt;if&lt;/span&gt;: &lt;span class="symbol"&gt;:new_record?&lt;/span&gt;
  validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="key"&gt;length&lt;/span&gt;: { &lt;span class="key"&gt;minimum&lt;/span&gt;: &lt;span class="integer"&gt;9&lt;/span&gt; }, &lt;span class="key"&gt;allow_blank&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Implementing the Tests and Validations in the Controller with ContextValidations&lt;/h3&gt;

&lt;p&gt;We&amp;#39;ve been using ContextValidations with our client work since its
release and realized we could unit test the controller to test the
validations.&lt;/p&gt;

&lt;p&gt;Our unit tests for the controller are here:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;describe &lt;span class="constant"&gt;UsersController&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#create&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    subject { &lt;span class="constant"&gt;User&lt;/span&gt;.new(&lt;span class="key"&gt;validations&lt;/span&gt;: validations_for(&lt;span class="symbol"&gt;:create&lt;/span&gt;)) }

    it { must have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;) }
    it { must have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;validpassword1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tooshort&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  describe &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#update&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    subject { &lt;span class="constant"&gt;User&lt;/span&gt;.new(&lt;span class="key"&gt;validations&lt;/span&gt;: validations_for(&lt;span class="symbol"&gt;:update&lt;/span&gt;)) }

    it { must have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;bob&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;test1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:username&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;) }
    it { must have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;nil&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;validpassword1234&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
    it { wont have_valid(&lt;span class="symbol"&gt;:password&lt;/span&gt;).when(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;tooshort&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) }
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note the use of &lt;code&gt;validations_for&lt;/code&gt;. It is a MiniTest
helper method defined by ContextValidations, which looks up the name
of the controller from the describe block, creates an instance of it,
and retrieves the validations for the context passed in. This prevents
you from needing to create your own instance and calling &lt;code&gt;validations&lt;/code&gt;
on it. The resulting tests end up looking very similar to what your
model tests would look like.&lt;/p&gt;

&lt;p&gt;Our model implementation is very light:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;User&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ActiveRecord&lt;/span&gt;::&lt;span class="constant"&gt;Base&lt;/span&gt;
  include &lt;span class="constant"&gt;ContextValidations&lt;/span&gt;::&lt;span class="constant"&gt;Model&lt;/span&gt;

  attr_accessor &lt;span class="symbol"&gt;:password&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And our validations are defined in the controller:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;UsersController&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;ApplicationController&lt;/span&gt;
  include &lt;span class="constant"&gt;ContextValidations&lt;/span&gt;::&lt;span class="constant"&gt;Controller&lt;/span&gt;

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;base_validations&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:username&lt;/span&gt;, &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="key"&gt;length&lt;/span&gt;: { &lt;span class="key"&gt;minimum&lt;/span&gt;: &lt;span class="integer"&gt;9&lt;/span&gt; }, &lt;span class="key"&gt;allow_blank&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;create_validations&lt;/span&gt;
    validates &lt;span class="symbol"&gt;:password&lt;/span&gt;, &lt;span class="key"&gt;presence&lt;/span&gt;: &lt;span class="predefined-constant"&gt;true&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;All of the examples are part of &lt;a href="https://github.com/dockyard/testing_context_validations"&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Wrapping it up&lt;/h2&gt;

&lt;p&gt;As you can see, writing the validation tests for the controller are
almost identical to writing them for the model. There are a few
differences in setting up the subject for the tests, but the only major
difference is that you are testing the controller instead of the model.
If you have any feedback on the tests we came up with, feel free to let
us know!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Putting things next to things with Susy</title>
    <link rel="alternate" href="/2013/07/29/putting-things-next-to-things-with-susy.html"/>
    <id>/2013/07/29/putting-things-next-to-things-with-susy.html</id>
    <published>2013-07-29T00:00:00Z</published>
    <updated>2013-07-29T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;#39;ve often lamented that one of the most challenging things to do on the front end is to put things next to other things. Things on top of things? Easy. Things by themselves? Piece of cake. This thing next to that thing? Things just got complicated.&lt;/p&gt;

&lt;p&gt;Should you roll your own layout, coming up with and refining conventions, browser testing to make sure everything still works? Do you rely on a front-end framework and all of the cluttered, confusing markup that comes going from that route? &lt;/p&gt;

&lt;p&gt;What about something different? This is where Susy saves the day.&lt;/p&gt;

&lt;h2&gt;The little framework that can&lt;/h2&gt;

&lt;p&gt;Susy is a grid framework for Compass. With Susy, you simply define your grid settings and start laying things out. If you want to come back and adjust your grid later, that&amp;#39;s totally fine. Susy will recalculate all your layouts.&lt;/p&gt;
&lt;div class="highlight css "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="error"&gt;$&lt;/span&gt;&lt;span class="tag"&gt;total-columns&lt;/span&gt;: &lt;span class="float"&gt;12&lt;/span&gt;
&lt;span class="error"&gt;$&lt;/span&gt;&lt;span class="tag"&gt;column-width&lt;/span&gt;: &lt;span class="float"&gt;4em&lt;/span&gt;
&lt;span class="error"&gt;$&lt;/span&gt;&lt;span class="tag"&gt;gutter-width&lt;/span&gt;: &lt;span class="float"&gt;1em&lt;/span&gt;
&lt;span class="error"&gt;$&lt;/span&gt;&lt;span class="tag"&gt;grid-padding&lt;/span&gt;: &lt;span class="error"&gt;$&lt;/span&gt;&lt;span class="tag"&gt;gutter-width&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Two main mixins do the bulk of the lifting. These are &amp;#39;container&amp;#39; and &amp;#39;span-columns&amp;#39;. Container is used to define the container of the grid. Span-columns is applied to elements within a container context. The syntax is easy.&lt;/p&gt;
&lt;div class="highlight css "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="class"&gt;.page&lt;/span&gt;
  +&lt;span class="tag"&gt;container&lt;/span&gt;
  &lt;span class="tag"&gt;article&lt;/span&gt;
    +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;8&lt;/span&gt;, &lt;span class="float"&gt;12&lt;/span&gt;)
  &lt;span class="tag"&gt;aside&lt;/span&gt;
    +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;4&lt;/span&gt; &lt;span class="tag"&gt;omega&lt;/span&gt;, &lt;span class="float"&gt;12&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This makes &amp;#39;.page&amp;#39; the grid container. The article takes up eight of twelve columns, the aside the final (omega) four of twelve columns.&lt;/p&gt;

&lt;p&gt;Susy really shines at figuring stuff out on its own. Say I wanted to have two columns of different widths with different padding for each column, both nested within the article above?&lt;/p&gt;
&lt;div class="highlight css "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;article&lt;/span&gt;
  +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;8&lt;/span&gt;, &lt;span class="float"&gt;12&lt;/span&gt;)
  &lt;span class="class"&gt;.one&lt;/span&gt;
    +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;3&lt;/span&gt;, &lt;span class="float"&gt;7&lt;/span&gt;, &lt;span class="float"&gt;1em&lt;/span&gt;)
  &lt;span class="class"&gt;.two&lt;/span&gt;
    +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;4&lt;/span&gt; &lt;span class="tag"&gt;omega&lt;/span&gt;, &lt;span class="float"&gt;7&lt;/span&gt;, &lt;span class="class"&gt;.5em&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where did the seven columns come from? Susy doesn&amp;#39;t care. They are within the context of the article. Susy will figure out the math and make seven columns. The third option is the column padding. Susy will do the math there too. Thanks, Susy!&lt;/p&gt;

&lt;h2&gt;Susy, breakpoints and you&lt;/h2&gt;

&lt;p&gt;Susy is made to build responsive grids. The default layout is called &amp;#39;magic&amp;#39;. It&amp;#39;s a fixed width layout that fluidly scales if the viewport is smaller than the width of the grid. You can also opt for a fully fluid layout, or a static layout for pixel precision.&lt;/p&gt;

&lt;p&gt;Any of these layouts can be further modified with the +at-breakpoint mixin. This mixin makes accessing media queries within the context of our grid simple and straightforward.&lt;/p&gt;
&lt;div class="highlight css "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="class"&gt;.one&lt;/span&gt;, &lt;span class="class"&gt;.two&lt;/span&gt;
  +&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;b&lt;/span&gt;&lt;span class="error"&gt;r&lt;/span&gt;&lt;span class="error"&gt;e&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;k&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;i&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;t&lt;/span&gt;(&lt;span class="float"&gt;30em&lt;/span&gt;)
    +&lt;span class="error"&gt;s&lt;/span&gt;&lt;span class="error"&gt;p&lt;/span&gt;&lt;span class="error"&gt;a&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;-&lt;/span&gt;&lt;span class="error"&gt;c&lt;/span&gt;&lt;span class="error"&gt;o&lt;/span&gt;&lt;span class="error"&gt;l&lt;/span&gt;&lt;span class="error"&gt;u&lt;/span&gt;&lt;span class="error"&gt;m&lt;/span&gt;&lt;span class="error"&gt;n&lt;/span&gt;&lt;span class="error"&gt;s&lt;/span&gt;(&lt;span class="float"&gt;7&lt;/span&gt;, &lt;span class="float"&gt;7&lt;/span&gt;, &lt;span class="class"&gt;.5em&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;�The one true grid&lt;/h2&gt;

&lt;p&gt;Everything Susy does is within context of a grid. You can  define multiple grids, and nest these grids inside one another. You can define abritrary values within any context. Many useful features, such as push, pull, and bleed are there to make life even easier.&lt;/p&gt;

&lt;p&gt;With all of this power comes some responsiblity. As with any tool, Susy just does what you ask it to do. It cannot explain  why your layout isn&amp;#39;t working. If you try to put too many things inside a grid, your layout will break. I&amp;#39;d recommend taking Susy for a spin. It&amp;#39;s really easy to &lt;a href="http://susy.oddbird.net/guides/getting-started/"&gt;get started&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Design Patterns: The Strategy Pattern</title>
    <link rel="alternate" href="/2013/07/25/design-patterns-strategy-pattern.html"/>
    <id>/2013/07/25/design-patterns-strategy-pattern.html</id>
    <published>2013-07-25T00:00:00Z</published>
    <updated>2013-07-25T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Walls are sooooo last week...&lt;/h2&gt;

&lt;p&gt;In our last post, we discussed the &lt;em&gt;&lt;a href="http://reefpoints.dockyard.com/ruby/2013/07/10/design-patterns-template-pattern.html"&gt;Template
Method&lt;/a&gt;&lt;/em&gt;
pattern and its benefits, finding it most useful when we need to simply shape
behavior of &lt;em&gt;subclasses&lt;/em&gt;. However, due to the reliance on &lt;em&gt;inheritance&lt;/em&gt;,
there are a couple of limitations to this pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subclasses are tightly bound to a superclass or baseclass&lt;/li&gt;
&lt;li&gt;Runtime flexibility is hindered&lt;/li&gt;
&lt;li&gt;Only a portion of the desired alogrithm is varied&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thankfully, there is another design pattern that resolves these
problems: the &lt;em&gt;Strategy&lt;/em&gt; pattern.&lt;/p&gt;

&lt;h2&gt;Summertime and the Livin&amp;#39; is Easy&lt;/h2&gt;

&lt;h3&gt;Hot dogs, hamburgers, and veggie patties&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s the middle of July, and there&amp;#39;s no better time to throw a day
party. Our pals are bringing the tasty beverages, so we just need to prepare the food.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll first create a superclass &lt;code&gt;Food&lt;/code&gt; that will delagate &lt;code&gt;#type&lt;/code&gt; to its
subclasses: &lt;code&gt;HotDog&lt;/code&gt;, &lt;code&gt;Hamburger&lt;/code&gt;, and &lt;code&gt;VeggiePatty&lt;/code&gt;. Notice that this
is the &lt;em&gt;&lt;a href="http://reefpoints.dockyard.com/ruby/2013/07/10/design-patterns-template-pattern.html"&gt;Template
Method&lt;/a&gt;&lt;/em&gt;
pattern in action.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Food&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;type&lt;/span&gt;
    raise &lt;span class="constant"&gt;NotImplementedError&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Ask the subclass&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;HotDog&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Food&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;type&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hot dogs&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Hamburger&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Food&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;type&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;hamburgers&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;VeggiePatty&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Food&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;type&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;veggie patties&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, let&amp;#39;s get the grill ready.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Grill&lt;/span&gt;
  attr_accessor &lt;span class="symbol"&gt;:food&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt; food
    &lt;span class="instance-variable"&gt;@food&lt;/span&gt; = food
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;grilling&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Grilling the &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;food.type&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nice. Now let&amp;#39;s get grilling! We&amp;#39;ll start with some hot dogs.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;grill = &lt;span class="constant"&gt;Grill&lt;/span&gt;.new(&lt;span class="constant"&gt;HotDog&lt;/span&gt;.new)
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the hot dogs!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Oh watch out, these dogs are almost done... time to throw on the
hamburger and veggie patties.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;grill.food = &lt;span class="constant"&gt;Hamburger&lt;/span&gt;.new
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the hamburgers!&amp;quot;&lt;/span&gt;

grill.food = &lt;span class="constant"&gt;VeggiePatty&lt;/span&gt;.new
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the veggie patties!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Wasn&amp;#39;t that easy? We were able to switch out items without
creating a new class of &lt;code&gt;Grill&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;h3&gt;Strategies and Context&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Strategy&lt;/em&gt; pattern employs &lt;em&gt;strategies&lt;/em&gt;, objects of which
possess identical behavior. Our grill party relies on &lt;em&gt;strategies&lt;/em&gt; to
tell us what &lt;code&gt;#type&lt;/code&gt; of food they were. It&amp;#39;s important that all strategy objects
have the same responsiblity and support the same interface, which in our case
was &lt;code&gt;grill.grilling&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Grill&lt;/code&gt; class is our &lt;em&gt;context&lt;/em&gt; class, the operator of the
&lt;em&gt;strategies&lt;/em&gt;, which uses the &lt;code&gt;HotDog#type&lt;/code&gt;, &lt;code&gt;Hamburger#type&lt;/code&gt;, and
&lt;code&gt;VeggiePatty#type&lt;/code&gt; interchangeably.&lt;/p&gt;

&lt;p&gt;Through our contrived example, we see the immediate benefits of this
design pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Separation of concerns&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Strategies&lt;/em&gt; at runtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;#39;ve achieved &lt;em&gt;separation of concerns&lt;/em&gt; by designating the &lt;code&gt;#type&lt;/code&gt;
method as our desired set of &lt;em&gt;strategies&lt;/em&gt;. &lt;code&gt;HotDog&lt;/code&gt;, &lt;code&gt;Hamburger&lt;/code&gt; and
&lt;code&gt;VeggiePatty&lt;/code&gt;  are unaware of our implementation of &lt;code&gt;Grill#grilling&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As for runtime flexibility, we&amp;#39;re able to switch out the items up on the
grill.&lt;/p&gt;

&lt;h3&gt;Special Patties: Lambdas&lt;/h3&gt;

&lt;p&gt;As we&amp;#39;re grilling our hamburger and veggies patties, a last minute guest
arrives, and she has brought some bacon, jalapeños, and onions.
Let&amp;#39;s make some custom patties, but avoid creating more subclasses of
&lt;code&gt;Food&lt;/code&gt;. What could we do here?&lt;/p&gt;

&lt;p&gt;A quick and awesome solution would be to use &lt;em&gt;lambdas&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Since we expect our &lt;em&gt;strategies&lt;/em&gt; to return &lt;code&gt;Strings&lt;/code&gt; for food &lt;code&gt;#type&lt;/code&gt;,
we can create a &lt;em&gt;lambda&lt;/em&gt; which will behave just like the other strategy
objects and return a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="constant"&gt;CUSTOMPATTY&lt;/span&gt; = lambda { |type| &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;type&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; }
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, let&amp;#39;s get back to our &lt;code&gt;Grill&lt;/code&gt; class and alter the class a little
bit.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Grill&lt;/span&gt;
  attr_accessor &lt;span class="symbol"&gt;:food&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;initialize&lt;/span&gt; food
    &lt;span class="instance-variable"&gt;@food&lt;/span&gt; = food
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;grilling&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Grilling the &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;print_food&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;print_food&lt;/span&gt;
    food_is_string? ? food : food.type
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;food_is_string?&lt;/span&gt;
    food.is_a? &lt;span class="constant"&gt;String&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since we know the &lt;em&gt;strategies&lt;/em&gt; are &lt;code&gt;Strings&lt;/code&gt;, we&amp;#39;ve created two
&lt;code&gt;private&lt;/code&gt; methods, &lt;code&gt;#print_food&lt;/code&gt; and &lt;code&gt;#food_is_string&lt;/code&gt;.
&lt;code&gt;#food_is_string&lt;/code&gt; will check if &lt;code&gt;Grill&lt;/code&gt; has received a
&lt;code&gt;String&lt;/code&gt; or not, and &lt;code&gt;#print_food&lt;/code&gt; will handle &lt;em&gt;lambdas&lt;/em&gt; or &lt;em&gt;classes&lt;/em&gt; of
food.&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s try grilling some hot dogs and custom patties!&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;jalapeños = &lt;span class="constant"&gt;CUSTOMPATTY&lt;/span&gt;.call &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;spicy jalapeños patties&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
bacon = &lt;span class="constant"&gt;CUSTOMPATTY&lt;/span&gt;.call &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;greasy, yummy bacon patties&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

grill = &lt;span class="constant"&gt;Grill&lt;/span&gt;.new jalapeños
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the spicy jalapeños patties!&amp;quot;&lt;/span&gt;

grill.food = bacon
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the greasy, yummy bacon patties!&amp;quot;&lt;/span&gt;

grill.food = &lt;span class="constant"&gt;HotDog&lt;/span&gt;.new
grill.grilling &lt;span class="comment"&gt;# =&amp;gt; &amp;quot;Grilling the hot dogs!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h3&gt;Mmm-mmmm... That is a tasty burger.&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Strategy&lt;/em&gt; pattern is a delagation-based design pattern, and shares
some similarities with the &lt;em&gt;Template Method&lt;/em&gt; pattern. However, instead
of depending so heavily on inheiritance between a superclass and
subclasses to use our target algorithm, we take our algorithm and
consider it as a separate object. As long as we remember the
relationship between the &lt;em&gt;strategies&lt;/em&gt; and the &lt;em&gt;context&lt;/em&gt;, we earn real
advantages over the &lt;em&gt;Template Method&lt;/em&gt;, as seen in our custom patty
example.&lt;/p&gt;

&lt;p&gt;I hope you had fun at our day party, and we&amp;#39;ll next explore the
&lt;em&gt;Observer&lt;/em&gt; pattern.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Announcing CTO To Go</title>
    <link rel="alternate" href="/2013/07/23/announcing-cto-to-go.html"/>
    <id>/2013/07/23/announcing-cto-to-go.html</id>
    <published>2013-07-23T00:00:00Z</published>
    <updated>2013-07-23T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today&amp;#39;s political campaigns and non-profits have deep technology and data requirements, and yet still face the same resource challenges that have always been present. It is with this in mind that DockYard is excited to announce a new consulting product geared to affordably support progressives and their allies with their data and technology needs.&lt;/p&gt;

&lt;p&gt;DockYard&amp;#39;s CTO to Go will allow Democratic campaigns and progressive nonprofits access to our experienced DC team for consulting in the following areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Technology Infrastructure (Startup, vendor hiring, email/backup)&lt;/li&gt;
&lt;li&gt;Data Management and Basic Targeting&lt;/li&gt;
&lt;li&gt;Staff Recruitment&lt;/li&gt;
&lt;li&gt;24 Hour On Call Emergency Assistance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Too often campaigns and non-profits have no idea where to begin with their technology program. Where do I get a website? Email? Voter File access? Data Management?&lt;/p&gt;

&lt;p&gt;CTO to Go allows campaigns and non-profits immediate and affordable access to independent consultants who&amp;#39;ve been through the process on all levels of campaigns, and who understand the time and cost pressures. And most importantly, when something goes wrong CTO to Go means you have an expert who knows how to quickly troubleshoot and solve the problem.&lt;/p&gt;

&lt;p&gt;CTO to Go is available in 5 hour blocks per month starting at $1250/month. For more details, contact Mike Sager - &lt;a href="mailto:mike@dockyard.com"&gt;mike@dockyard.com&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Design Patterns: The Template Method Pattern</title>
    <link rel="alternate" href="/ruby/2013/07/10/design-patterns-template-pattern.html"/>
    <id>/ruby/2013/07/10/design-patterns-template-pattern.html</id>
    <published>2013-07-10T00:00:00Z</published>
    <updated>2013-07-10T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As the field of software development grows, we developers are
continuously trying to catch up with the latest technologies.
Fortunately, the craft of writing maintainable code is language
agnostic, and in this series of blogposts, we&amp;#39;ll focus on a powerful set of
timeless tools: &lt;em&gt;Design Patterns&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I highly recommend Russ Olsen&amp;#39;s book &lt;a href="http://designpatternsinruby.com/"&gt;Design
Patterns in Ruby&lt;/a&gt;. Our series
will draw inspiration from it and is brief in comparison. So if you
enjoy these posts (and I hope you do!), the book will be a great
investment.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll explore various design patterns and learn
when to apply them. Our topic for today will be the &lt;em&gt;Template Method&lt;/em&gt;
pattern, the simplest design pattern.&lt;/p&gt;

&lt;h2&gt;Our First Day in Construction&lt;/h2&gt;

&lt;h3&gt;The Right Tools&lt;/h3&gt;

&lt;p&gt;Quite simply, design patterns are just tools that help us construct software. However,
just like tools, we need to use the correct and proper one for the task. We
could use a hammer on screws, but we&amp;#39;d damage the wood planks and using a
power drill will be much more efficient. Before using any one of the numerous design patterns, it is
crucial to understand the problem we wish to solve.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It is incorrect to use a particular design pattern on the wrong
type of problem&lt;/em&gt;. In other words, it is in poor practice to use a
particular design pattern on a problem that does not require the
aforementioned design pattern.&lt;/p&gt;

&lt;h3&gt;Let&amp;#39;s Build Some Walls&lt;/h3&gt;

&lt;p&gt;Today, we&amp;#39;ve been asked by our foreman to build a couple of walls. All
the walls will share the same dimensions and will be made from the same
material (for this construction project, our foreman has given us an
&amp;quot;easy&amp;quot; set of requirements).&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Blueprints for Wall&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;minitest/autorun&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

describe &lt;span class="constant"&gt;Wall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:wall&lt;/span&gt;) { &lt;span class="constant"&gt;Wall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from brick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from brick!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What a nice boss, he&amp;#39;s handed us the blueprints!
Now it&amp;#39;s just up to us to build out the &lt;code&gt;Wall&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Wall&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;dimensions&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;made_from&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from brick!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nice! Our tests pass, everybody is happy, and we&amp;#39;re off to lunch!&lt;/p&gt;

&lt;h3&gt;A Hammer or a Nailgun?&lt;/h3&gt;

&lt;p&gt;Coming back to the site, our foreman has informed us that we need more
walls. &amp;quot;That&amp;#39;s a piece of cake,&amp;quot; we reply, recalling how easy it was to
build out the &lt;code&gt;Wall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&amp;quot;Not so fast,&amp;quot; our foreman retorts. We&amp;#39;re given new blueprints with
different wall requirements.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Blueprints for a BrickWall&lt;/span&gt;
describe &lt;span class="constant"&gt;BrickWall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:brick_wall&lt;/span&gt;) { &lt;span class="constant"&gt;BrickWall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    brick_wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from brick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    brick_wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from brick!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="comment"&gt;# Blueprints for a ConcreteWall&lt;/span&gt;
describe &lt;span class="constant"&gt;ConcreteWall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:concrete_wall&lt;/span&gt;) { &lt;span class="constant"&gt;ConcreteWall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    concrete_wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from concrete&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    concrete_wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from concrete!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="comment"&gt;# Blueprints for a WoodWall&lt;/span&gt;
describe &lt;span class="constant"&gt;WoodWall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:wood_wall&lt;/span&gt;) { &lt;span class="constant"&gt;WoodWall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wood_wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 10ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from wood&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wood_wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from wood!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hmm... A couple of ideas run through our heads. We could follow the initial &lt;code&gt;Wall&lt;/code&gt; class and
define each method, hardcoding each string output, for the &lt;code&gt;BrickWall&lt;/code&gt;, &lt;code&gt;ConcreteWall&lt;/code&gt;, and &lt;code&gt;WoodWall&lt;/code&gt;
classes. That seems like an okay idea, but we&amp;#39;d have to hard code each
instance method. What if our house requires a dozen different types of walls?&lt;/p&gt;

&lt;h3&gt;Open That Toolbox!&lt;/h3&gt;

&lt;p&gt;Sipping on our after-lunch coffee, we realize that we&amp;#39;ve got a tool right
for the job, the &lt;em&gt;Template Method&lt;/em&gt; pattern.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Template Method&lt;/em&gt; pattern, the creation of a &lt;em&gt;skeletal class&lt;/em&gt; will
serve as the basis for various &lt;em&gt;subclasses&lt;/em&gt; or &lt;em&gt;concrete classes&lt;/em&gt;. Within the &lt;em&gt;skeletal class&lt;/em&gt;
there are &lt;em&gt;abstract methods&lt;/em&gt;, which in turn, will be overridden by the
methods of &lt;em&gt;subclasses&lt;/em&gt;. Essentially, we&amp;#39;ll define a &lt;code&gt;Wall&lt;/code&gt; class (our
&lt;em&gt;skeletal class&lt;/em&gt;) and its &lt;em&gt;subclasses&lt;/em&gt;, &lt;code&gt;BrickWall&lt;/code&gt;, &lt;code&gt;ConcreteWall&lt;/code&gt;, and
&lt;code&gt;WoodWall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Going over the blueprints, we notice that the three different classes of
walls each contain the methods &lt;code&gt;#dimensions&lt;/code&gt; and &lt;code&gt;#made_from&lt;/code&gt;, which
result in slighty different strings. With this knowledge, let&amp;#39;s
create our &lt;code&gt;Wall&lt;/code&gt; class and its subclasses.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Wall&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;dimensions&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I am &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;length&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;ft. long and &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;width&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;made_from&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I am made from &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;material&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    &lt;span class="integer"&gt;30&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BrickWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;width&lt;/span&gt;
    &lt;span class="integer"&gt;20&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;material&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;brick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;ConcreteWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;width&lt;/span&gt;
    &lt;span class="integer"&gt;20&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;material&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;concrete&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;WoodWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    &lt;span class="integer"&gt;10&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;width&lt;/span&gt;
    &lt;span class="integer"&gt;20&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;material&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;wood&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;h3&gt;Hook Methods&lt;/h3&gt;

&lt;p&gt;Within the &lt;code&gt;Wall&lt;/code&gt; class we have defined a private method called &lt;code&gt;#length&lt;/code&gt;
because we see that &lt;code&gt;BrickWall&lt;/code&gt; and &lt;code&gt;ConcreteWall&lt;/code&gt; share the same
length. As for the &lt;code&gt;WoodWall&lt;/code&gt; class, we simply overwrite the &lt;code&gt;#length&lt;/code&gt;
and give it a value of &lt;code&gt;10&lt;/code&gt;. These are examples of &lt;em&gt;Hook Methods&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hook Methods&lt;/em&gt; serve two purposes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Override the skeletal implementation and define something new&lt;/li&gt;
&lt;li&gt;Or, accept the default implementation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please note that the default implemetation, within the skeletal class, does
not necessarily need to define a method. For example, we could have had:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Wall&lt;/span&gt;

  ...

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    raise &lt;span class="constant"&gt;NotImplementedError&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Sorry, you have to override length&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BrickWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  ...

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    &lt;span class="integer"&gt;30&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the example above, the &lt;code&gt;#length&lt;/code&gt; method within the &lt;code&gt;Wall&lt;/code&gt; class
served as a placeholder for the &lt;code&gt;#length&lt;/code&gt; for the &lt;code&gt;BrickWall&lt;/code&gt;, it&amp;#39;s
&lt;em&gt;concrete class&lt;/em&gt;. Essentially, &lt;em&gt;hook methods&lt;/em&gt; inform all &lt;em&gt;concrete
classes&lt;/em&gt; that the method may require an override. If the base
implementation is undefined the subclasses must define the &lt;em&gt;hook
methods&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Those Are Some Nice Walls&lt;/h2&gt;

&lt;p&gt;Our foreman is delighted with the results and we&amp;#39;re going to call it a
day. As we can see, using the &lt;em&gt;Template Method&lt;/em&gt; pattern is not difficult
at all. We first defined a base class, within which we defined necessary
&lt;em&gt;hook methods&lt;/em&gt; to be overridden by our &lt;em&gt;subclasses&lt;/em&gt;. Of course, this
particular design pattern does not solve every conceivable problem, but
helps keep our code clean by the use of inheritance.&lt;/p&gt;

&lt;p&gt;Next we&amp;#39;ll be discussing the &lt;em&gt;Strategy&lt;/em&gt; method pattern. Stay tuned!&lt;/p&gt;
</content>
  </entry>
</feed>
</section><footer><ul class='footer-links'><li><a class='link link-in-footer fontello' href='https://github.com/DockYard' target='_blank'>g</a></li><li><a class='link link-in-footer fontello' href='https://twitter.com/DockYard' target='_blank'>t</a></li><li><a class='link link-in-footer fontello' href='http://reefpoints.dockyard.com/atom.xml' target='_blank'>r</a></li><li><a class='link link-in-footer fontello' href='http://dockyard.com/contact' target='_blank'>m</a></li></ul><form class='footer-form'><label class='footer-form-label'>Get in touch with us!</label><input class='footer-form-input' placeholder='Email' type='text'><button class='footer-form-submit fontello' href='http://dockyard.com/contact'>R</button></form><a class='footer-number' href='tel:855-362-5973'>(855) DOCK-YRD</a><p class='footer-copyright'>&copy; 2013 DockYard, LLC. All Rights Reserved.</p></footer><audio class='foghorn' preload='auto' src='/sound/foghorn.mp3'></audio><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>