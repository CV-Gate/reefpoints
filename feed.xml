<!DOCTYPE html><html><head><title>DockYard ~ Ruby on Rails and Ember.js Development | Boston-based Web &amp; Mobile Software Consultancy</title><link href="/stylesheets/all-029633d8.css" media="screen" rel="stylesheet" type="text/css" /><script src="/javascripts/all-d0af4672.js" type="text/javascript"></script><meta content='NO-CACHE' http-equiv='CACHE-CONTROL'><meta content='DockYard is a Ruby on Rails, PostgreSQL, and, Ember.js, web / mobile application development software consultancy based in Boston, MA.' namer='description'><meta content='ruby on rails, rails, ruby, ruby on rails training, ruby application development, ruby on rails application development, ember application development, ember.js application development, software application development, web, web application development, mobile, mobile application development, ios, ios application development, iphone, iphone application development, android, android application development, postgres, startups, enterprise, Boston, MA, Massachusetts, for hire' name='keywords'><meta content='web development, mobile development, startups, enterprise, ruby on rails, rails, ruby, ruby on rails training, Boston, for hire' name='keywords'><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0' name='viewport'><meta content='DockYard.com - ' name='description'><link href='http://dockyard.com/humans.txt' rel='author'><link href='/apple-touch-icon.png' rel='apple-touch-icon'><link href='/apple-touch-icon-precomposed.png' rel='apple-touch-icon-precomposed'><script>
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-24185112-2']);
    _gaq.push(['_trackPageview']);
  
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>
<!--
                                                                    ..
                                                                 ,Z+O.
                                                              .OO.O..
                                                             OZ..O.
                                                         ..OO..87.
                                                        .O7O..O...
                                                      .O...Z~O.
                                                   .:Z~. ..Z..
                                                  +O.O   .8..
                                     ...       .OO.  O  O?.
                             ..ZOOOOOOOOOZOOO.ZOZ.   .OO..
                           .OOOOOOOOOOOOOOOOOO..Z.   $O.
                         .ZOOOOOOOOOOOOOOOOOO.  .O..O.
                        .ZOOOOOOOOOOOOOOOOOOOZ  .:O$.
                        OZOOOOOOOOOOO...OOOOOOOZ$ZO
                      ..OOOOOOOOOOOOO  .OOOOOOOOOOO..
                      .OOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                      .OOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                      OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     .OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     :OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.
                     ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                     OOOOOOOOOOOOOOOOOOOOOOOOOOOO7OO.
                     ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ.
                     OOOOOOZOOOOOOOO.ZOOOOOOOOOOO7OO.
                     ZOOOOO.OOOOOOOO.OOOOOOOOOO.  OO.
...     ..           OOOOO.OOOOOOOO.OOOOOOOOO.   .O:
.OOZ...OOO.        ..OOOOO.OOOOOOO.OOOOOOOOZ.    .Z..
.OOOOOOOOO         .ZOOOOO.OOOOO..OOOOOOOO~      .Z
 .OOOOOOO.         .OOOOOO.OZZ..OOOOOOOOO.      .?O
  .OOOOOI.        .OOOOOOO..,ZOOOOOOOOOO..      .O.
   .OOOOZ.      ..ZOOOOOOOOOOOOOOOOOOOO~        .O.
   .OOOOO= .....ZOOOOOOOOOOOOOOOOOOOOOO.      ..O.
   ..OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ       .,OO.
    .ZOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.     ...OO..
     .OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO.   ...OO.
     ..ZOOOOOOOOOOOOOOOOOOOOOOOOOOOO.... OZO..
      ...OOOOOOOOOOOOOOOOOOOOOOOOOOZOOOZO...
          .....~OOOOOOOOOOOOOOOOO:........
                ................
--></head><body id='blog'><header id='mobile-header'><div class='wrap'><a class='header-logo' href='/'>DockYard</a><div class='menu-button'></div></div><ul class='flexnav' data-breakpoint='481' id='mobile-nav'><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com'><span class='mobile-nav-icon fontello'>h</span><p class='main-nav-item'>Home</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/work'><span class='mobile-nav-icon fontello'>w</span><p class='main-nav-item'>Work</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/team'><span class='mobile-nav-icon fontello'>p</span><p class='main-nav-item'>Team</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/community'><span class='mobile-nav-icon fontello'>c</span><p class='main-nav-item'>Community</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='/'><span class='mobile-nav-icon fontello'>b</span><p class='main-nav-item'>Blog</p></a></li><li class='mobile-nav-link-wrap'><a class='mobile-nav-link' href='http://dockyard.com/contact'><span class='mobile-nav-icon fontello'>m</span><p class='main-nav-item'>Contact</p></a></li></ul></header><header id='site-header'><div class='wrap'><h1><a class='header-logo' href='http://dockyard.com'>DockYard</a></h1><ul class='main-nav'><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/work'>Work</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/team'>Team</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/community'>Community</a></li><li class='nav-work'><a class='main-nav-item current' href='/'>Blog</a></li><li class='nav-work'><a class='main-nav-item' href='http://dockyard.com/contact'>Contact</a></li></ul></div></header><section id='content'><?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-07-10T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Design Patterns: The Template Method Pattern</title>
    <link rel="alternate" href="/ruby/2013/07/10/design-patterns-template-pattern.html"/>
    <id>/ruby/2013/07/10/design-patterns-template-pattern.html</id>
    <published>2013-07-10T00:00:00Z</published>
    <updated>2013-07-10T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As the field of software development grows, we developers are
continuously trying to catch up with the latest technologies.
Fortunately, the craft of writing maintainable code is language
agnostic, and in this series of blogposts, we&amp;#39;ll focus on a powerful set of
timeless tools: &lt;em&gt;Design Patterns&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I highly recommend Russ Olsen&amp;#39;s book &lt;a href="http://designpatternsinruby.com/"&gt;Design
Patterns in Ruby&lt;/a&gt;. Our series
will draw inspiration from it and is brief in comparison. So if you
enjoy these posts (and I hope you do!), the book will be a great
investment.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll explore various design patterns and learn
when to apply them. Our topic for today will be the &lt;em&gt;Template Method&lt;/em&gt;
pattern, the simplest design pattern.&lt;/p&gt;

&lt;h2&gt;Our First Day in Construction&lt;/h2&gt;

&lt;h3&gt;The Right Tools&lt;/h3&gt;

&lt;p&gt;Quite simply, design patterns are just tools that help us construct software. However,
just like tools, we need to use the correct and proper one for the task. We
could use a hammer on screws, but we&amp;#39;d damage the wood planks and using a
power drill will be much more efficient. Before using any one of the numerous design patterns, it is
crucial to understand the problem we wish to solve.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It is incorrect to use a particular design pattern on the wrong
type of problem&lt;/em&gt;. In other words, it is in poor practice to use a
particular design pattern on a problem that does not require the
aforementioned design pattern.&lt;/p&gt;

&lt;h3&gt;Let&amp;#39;s Build Some Walls&lt;/h3&gt;

&lt;p&gt;Today, we&amp;#39;ve been asked by our foreman to build a couple of walls. All
the walls will share the same dimensions and will be made from the same
material (for this construction project, our foreman has given us an
&amp;quot;easy&amp;quot; set of requirements).&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Blueprints for Wall&lt;/span&gt;
require &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;minitest/autorun&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;

describe &lt;span class="constant"&gt;Wall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:wall&lt;/span&gt;) { &lt;span class="constant"&gt;Wall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from brick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from brick!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What a nice boss, he&amp;#39;s handed us the blueprints!
Now it&amp;#39;s just up to us to build out the &lt;code&gt;Wall&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Wall&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;dimensions&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;made_from&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from brick!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nice! Our tests pass, everybody is happy, and we&amp;#39;re off to lunch!&lt;/p&gt;

&lt;h3&gt;A Hammer or a Nailgun?&lt;/h3&gt;

&lt;p&gt;Coming back to the site, our foreman has informed us that we need more
walls. &amp;quot;That&amp;#39;s a piece of cake,&amp;quot; we reply, recalling how easy it was to
build out the &lt;code&gt;Wall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&amp;quot;Not so fast,&amp;quot; our foreman retorts. We&amp;#39;re given new blueprints with
different wall requirements.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;# Blueprints for a BrickWall&lt;/span&gt;
describe &lt;span class="constant"&gt;BrickWall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:brick_wall&lt;/span&gt;) { &lt;span class="constant"&gt;BrickWall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    brick_wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from brick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    brick_wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from brick!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="comment"&gt;# Blueprints for a ConcreteWall&lt;/span&gt;
describe &lt;span class="constant"&gt;ConcreteWall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:concrete_wall&lt;/span&gt;) { &lt;span class="constant"&gt;ConcreteWall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    concrete_wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 30ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from concrete&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    concrete_wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from concrete!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="comment"&gt;# Blueprints for a WoodWall&lt;/span&gt;
describe &lt;span class="constant"&gt;WoodWall&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
  let(&lt;span class="symbol"&gt;:wood_wall&lt;/span&gt;) { &lt;span class="constant"&gt;WoodWall&lt;/span&gt;.new }

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should state its dimensions&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wood_wall.dimensions.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am 10ft. long and 20ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  it &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;should be made from wood&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="keyword"&gt;do&lt;/span&gt;
    wood_wall.made_from.must_equal &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;I am made from wood!&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hmm... A couple of ideas run through our heads. We could follow the initial &lt;code&gt;Wall&lt;/code&gt; class and
define each method, hardcoding each string output, for the &lt;code&gt;BrickWall&lt;/code&gt;, &lt;code&gt;ConcreteWall&lt;/code&gt;, and &lt;code&gt;WoodWall&lt;/code&gt;
classes. That seems like an okay idea, but we&amp;#39;d have to hard code each
instance method. What if our house requires a dozen different types of walls?&lt;/p&gt;

&lt;h3&gt;Open That Toolbox!&lt;/h3&gt;

&lt;p&gt;Sipping on our after-lunch coffee, we realize that we&amp;#39;ve got a tool right
for the job, the &lt;em&gt;Template Method&lt;/em&gt; pattern.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Template Method&lt;/em&gt; pattern, the creation of a &lt;em&gt;skeletal class&lt;/em&gt; will
serve as the basis for various &lt;em&gt;subclasses&lt;/em&gt; or &lt;em&gt;concrete classes&lt;/em&gt;. Within the &lt;em&gt;skeletal class&lt;/em&gt;
there are &lt;em&gt;abstract methods&lt;/em&gt;, which in turn, will be overridden by the
methods of &lt;em&gt;subclasses&lt;/em&gt;. Essentially, we&amp;#39;ll define a &lt;code&gt;Wall&lt;/code&gt; class (our
&lt;em&gt;skeletal class&lt;/em&gt;) and its &lt;em&gt;subclasses&lt;/em&gt;, &lt;code&gt;BrickWall&lt;/code&gt;, &lt;code&gt;ConcreteWall&lt;/code&gt;, and
&lt;code&gt;WoodWall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Going over the blueprints, we notice that the three different classes of
walls each contain the methods &lt;code&gt;#dimensions&lt;/code&gt; and &lt;code&gt;#made_from&lt;/code&gt;, which
result in slighty different strings. With this knowledge, let&amp;#39;s
create our &lt;code&gt;Wall&lt;/code&gt; class and its subclasses.&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Wall&lt;/span&gt;
  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;dimensions&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I am &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;length&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;ft. long and &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;width&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;ft. wide!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;made_from&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;I am made from &lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;#{&lt;/span&gt;material&lt;span class="inline-delimiter"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class="content"&gt;!&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    &lt;span class="integer"&gt;30&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BrickWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;width&lt;/span&gt;
    &lt;span class="integer"&gt;20&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;material&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;brick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;ConcreteWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;width&lt;/span&gt;
    &lt;span class="integer"&gt;20&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;material&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;concrete&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;WoodWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    &lt;span class="integer"&gt;10&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;width&lt;/span&gt;
    &lt;span class="integer"&gt;20&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;material&lt;/span&gt;
    &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;wood&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;

&lt;h3&gt;Hook Methods&lt;/h3&gt;

&lt;p&gt;Within the &lt;code&gt;Wall&lt;/code&gt; class we have defined a private method called &lt;code&gt;#length&lt;/code&gt;
because we see that &lt;code&gt;BrickWall&lt;/code&gt; and &lt;code&gt;ConcreteWall&lt;/code&gt; share the same
length. As for the &lt;code&gt;WoodWall&lt;/code&gt; class, we simply overwrite the &lt;code&gt;#length&lt;/code&gt;
and give it a value of &lt;code&gt;10&lt;/code&gt;. These are examples of &lt;em&gt;Hook Methods&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hook Methods&lt;/em&gt; serve two purposes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Override the skeletal implementation and define something new&lt;/li&gt;
&lt;li&gt;Or, accept the default implementation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please note that the default implemetation, within the skeletal class, does
not necessarily need to define a method. For example, we could have had:&lt;/p&gt;
&lt;div class="highlight ruby "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;Wall&lt;/span&gt;

  ...

  private

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    raise &lt;span class="constant"&gt;NotImplementedError&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Sorry, you have to override length&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="class"&gt;BrickWall&lt;/span&gt; &amp;lt; &lt;span class="constant"&gt;Wall&lt;/span&gt;
  private

  ...

  &lt;span class="keyword"&gt;def&lt;/span&gt; &lt;span class="function"&gt;length&lt;/span&gt;
    &lt;span class="integer"&gt;30&lt;/span&gt;
  &lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;span class="keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the example above, the &lt;code&gt;#length&lt;/code&gt; method within the &lt;code&gt;Wall&lt;/code&gt; class
served as a placeholder for the &lt;code&gt;#length&lt;/code&gt; for the &lt;code&gt;BrickWall&lt;/code&gt;, it&amp;#39;s
&lt;em&gt;concrete class&lt;/em&gt;. Essentially, &lt;em&gt;hook methods&lt;/em&gt; inform all &lt;em&gt;concrete
classes&lt;/em&gt; that the method may require an override. If the base
implementation is undefined the subclasses must define the &lt;em&gt;hook
methods&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Those Are Some Nice Walls&lt;/h2&gt;

&lt;p&gt;Our foreman is delighted with the results and we&amp;#39;re going to call it a
day. As we can see, using the &lt;em&gt;Template Method&lt;/em&gt; pattern is not difficult
at all. We first defined a base class, within which we defined necessary
&lt;em&gt;hook methods&lt;/em&gt; to be overridden by our &lt;em&gt;subclasses&lt;/em&gt;. Of course, this
particular design pattern does not solve every conceivable problem, but
helps keep our code clean by the use of inheritance.&lt;/p&gt;

&lt;p&gt;Next we&amp;#39;ll be discussing the &lt;em&gt;Strategy&lt;/em&gt; method pattern. Stay tuned!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>First Month at DockYard</title>
    <link rel="alternate" href="/office/2013/07/09/first-month-at-dockyard.html"/>
    <id>/office/2013/07/09/first-month-at-dockyard.html</id>
    <published>2013-07-09T00:00:00Z</published>
    <updated>2013-07-09T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I came to the programming party a little late in my &lt;a href="http://www.trincoll.edu/Pages/default.aspx"&gt;college&lt;/a&gt; career, 
only having a year and a half of classroom experience under my belt. Due
to my limited CS background, I was rather anxious to start work at a
web development startup, fearing my qualifications were not up to par.
However, my feelings of inadequacy quickly subsided after starting at
DockYard! I was welcomed by a comfortable learning environment and an
atmosphere of positivity and productivity. My coworkers are very
approachable and always willing to answer my questions. Because of
DockYard&amp;#39;s intimate size I am able to see all sides of the business, and
get to know everyone in the office.&lt;/p&gt;

&lt;p&gt;It has now been a month since I began working and already I feel I am
light-years ahead of where I started. My nerves have been replaced by an
eagerness to continue learning and grow as a developer. The amount of
information that has been thrown my way is rather overwhelming. I have
already pored through 6 books, including: &lt;a href="http://pragprog.com/book/rails32/agile-web-development-with-rails-3-2"&gt;Agile Web Development with
Rails&lt;/a&gt; by Sam Ruby and, &lt;a href="http://jsninja.com/"&gt;Secrets of the JavaScript Ninja&lt;/a&gt; by John Resig, in
addition to other readings on &lt;a href="http://coffeescript.org"&gt;CoffeeScript&lt;/a&gt;, version control (&lt;a href="http://git-scm.com"&gt;git&lt;/a&gt;), and
&lt;a href="http://en.wikipedia.org/wiki/User_story"&gt;user stories&lt;/a&gt;. Not to mention my introduction to vim and all the commands
that accompany it. While I cannot claim all of the information has
stuck, the exposure will surely breed understanding. I have learned that
it isn&amp;#39;t about having all the answers, but the efficiency of finding
them that is important.&lt;/p&gt;

&lt;p&gt;In addition to all the reading, I have worked on a small side project: a
simple blog site (my introduction to &lt;a href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;test-driven
development&lt;/a&gt;) that I
rebuilt 3 times, each time adding more features. The saying, &amp;quot;repetition
is the mother of all learning&amp;quot;, has certainly resonated with me after
this exercise.  Also &lt;a href="http://en.wikipedia.org/wiki/Pair_programming"&gt;pair programming&lt;/a&gt; with others in the office has also
been extremely helpful, giving me an idea of the day-to-day. Overall, I
feel lucky to be at DockYard in the midst of the growing field of web
development. Already I can say my experience has been invaluable and I
thoroughly look forward to the rest of the summer.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Steven Trevathan is a DockYarder</title>
    <link rel="alternate" href="/announcement/2013/07/08/steven-trevathan-is-a-dockyarder.html"/>
    <id>/announcement/2013/07/08/steven-trevathan-is-a-dockyarder.html</id>
    <published>2013-07-08T00:00:00Z</published>
    <updated>2013-07-08T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/steven-trevathan.jpg" alt="Steven"&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m very happy to announce today that DockYard has joined forces with
Boston design firm Dobot! Leader designer Steven Trevathan has come on
as a partner and Creative Director (until we come up with a title he
prefers) of DockYard.&lt;/p&gt;

&lt;p&gt;This is a huge step forward for us. While we have had in-house designers
we have been actually leaning on Steven from time to time for our
concept design needs. Now with Steven coming on as part of our team he
will focus on building out the design side of DockYard and putting
together a formal concept design process for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/strevat"&gt;Follow Steven on Twitter&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Logan Faerber is a DockYarder</title>
    <link rel="alternate" href="/announcement/2013/07/08/logan-faerber-is-a-dockyarder.html"/>
    <id>/announcement/2013/07/08/logan-faerber-is-a-dockyarder.html</id>
    <published>2013-07-08T00:00:00Z</published>
    <updated>2013-07-08T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/logan-faerber.jpg" alt="Logan"&gt;
Along with his other fellow Dobot-er we welcome Logan Faerber to the
DockYard team today!&lt;/p&gt;

&lt;p&gt;Logan is a &lt;a href="http://www.loganfaerber.com/"&gt;kick ass illustrator&lt;/a&gt; who
has done work for New York Life, Dynamo Labs, CareShare, CustomMade,
&lt;a href="http://www.biowarestore.com/garrus-screenprint-poster.html"&gt;Bioware&lt;/a&gt;,
and &lt;a href="http://www.archaia.com/archaia-titles/hawken-genesis/"&gt;Archaia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Logan has been working out of our office for the last few months and we
are excited to have his unique talents at DockYard.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/loganfaerber"&gt;Follow Logan on Twitter&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>DockYard Acquires Dobot</title>
    <link rel="alternate" href="/announcement/2013/07/08/dockyard-acquires-dobot.html"/>
    <id>/announcement/2013/07/08/dockyard-acquires-dobot.html</id>
    <published>2013-07-08T00:00:00Z</published>
    <updated>2013-07-08T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Today I&amp;#39;m very happy to announce that we have acquired local design firm
&lt;a href="http://dobotdo.com"&gt;Dobot&lt;/a&gt;, its two partners Steven &amp;amp; Logan have joined us full-time.
This is a huge move for DockYard, and a simple one for Dobot (they have
been working out of our office for the past few months so they don&amp;#39;t
actually need to move anywhere).&lt;/p&gt;

&lt;p&gt;Please see the announcement for &lt;a href="http://reefpoints.dockyard.com/announcement/2013/07/08/steven-trevathan-is-a-dockyarder.html"&gt;Steven
Trevathan&lt;/a&gt;
and the announcement for &lt;a href="http://reefpoints.dockyard.com/announcement/2013/07/08/logan-faerber-is-a-dockyarder.html"&gt;Logan
Faerber&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sean Hussey is a DockYarder</title>
    <link rel="alternate" href="/announcement/2013/07/01/sean-hussey-is-a-dockyarder.html"/>
    <id>/announcement/2013/07/01/sean-hussey-is-a-dockyarder.html</id>
    <published>2013-07-01T00:00:00Z</published>
    <updated>2013-07-01T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/hussey.png" alt="Sean Hussey"&gt;
Today is the first day for Sean Hussey at DockYard. He has been
contracting with us for the past few months and I was finally able to
lock him down recently. Sean and I have known one another for years as
he hired me for my first Ruby job at
&lt;a href="http://global.rakuten.com/en/"&gt;RakutenUSA&lt;/a&gt;. He brings years of Sr.
level Ruby experience to our team.&lt;/p&gt;
</content>
  </entry>
</feed>
</section><footer><ul class='footer-links'><li><a class='link link-in-footer fontello' href='https://github.com/DockYard' target='_blank'>g</a></li><li><a class='link link-in-footer fontello' href='https://twitter.com/DockYard' target='_blank'>t</a></li><li><a class='link link-in-footer fontello' href='http://reefpoints.dockyard.com/atom.xml' target='_blank'>r</a></li><li><a class='link link-in-footer fontello' href='http://dockyard.com/contact' target='_blank'>m</a></li></ul><form class='footer-form'><label class='footer-form-label'>Get in touch with us!</label><input class='footer-form-input' placeholder='Email' type='text'><button class='footer-form-submit fontello' href='http://dockyard.com/contact'>R</button></form><a class='footer-number' href='tel:855-362-5973'>(855) DOCK-YRD</a><p class='footer-copyright'>&copy; 2013 DockYard, LLC. All Rights Reserved.</p></footer><audio class='foghorn' preload='auto' src='/sound/foghorn.mp3'></audio><script>
  /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
  var disqus_shortname = 'reefpoints'; // required: replace example with your forum shortname
  
  /* * * DON'T EDIT BELOW THIS LINE * * */
  (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
  }());
</script></body></html>